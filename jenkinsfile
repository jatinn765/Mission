pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    environment{
        SCANNER_HOME= tool 'sonar-scanner'
    }
    
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Git Checkout') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/jatinn765/Mission.git'
            }
        }
        stage('Build App') {
            steps {
                sh "mvn compile -DskipTests=true"
            }
        }
        stage('Unit Test') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        stage('sonarqube analysis') {
            steps {
                withSonarQubeEnv('sonar'){
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Ekart -Dsonar.projectName=Ekart \
                    -Dsonar.java.binaries=. '''
                }
            }
        }
        stage('package App') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        
        stage('Build & Tag Docker Image') {
            steps {
                script {
                    sh "docker build -t jatin765/mission:v1 ."
                }
            }
        }
        stage('Trivy Image scan') {
            steps {
                sh "trivy image jatin765/mission:v1 > trivy.txt"
            }
        }
        stage('Docker push') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh "docker push jatin765/mission:v1"
                    }
                }
            }
        }
        stage('Deploy container') {
            steps {
                script {
                    sh "docker run -d -p 8086:8080 jatin765/mission:v1"
                }
            }
        }
        stage('Deploy to Kubernetes'){
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'jatin-eks', contextName: '', credentialsId: 'kube-cred', namespace: 'default', restrictKubeConfigAccess: false, serverUrl: 'https://543F7930D797DDD29109DE4C59DFE3C2.gr7.ap-south-1.eks.amazonaws.com') {
                    sh "path/to/kubectl apply -f deployment.yml"
                    sh "path/to/kubectl apply -f service.yml"
                }
            }
        }
    }
}